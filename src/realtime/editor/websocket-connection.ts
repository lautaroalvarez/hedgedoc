/*
 * SPDX-FileCopyrightText: 2022 The HedgeDoc developers (see AUTHORS file)
 *
 * SPDX-License-Identifier: AGPL-3.0-only
 */
import { encoding } from 'lib0';
import WebSocket from 'ws';
import { encodeAwarenessUpdate } from 'y-protocols/awareness';
import { writeSyncStep1 } from 'y-protocols/sync';

import { MessageType } from './message-type';
import { RealtimeNote } from './realtime-note';

export class WebsocketConnection {
  private pongReceived = true;
  private readonly pingTimeout = 30 * 1000;

  constructor(
    private websocket: WebSocket,
    private realtimeNote: RealtimeNote,
  ) {
    this.setupPing();
    this.sendInitialSync();
    this.sendAwarenessState();
  }

  private setupPing(): void {
    const pingInterval = setInterval(() => {
      if (this.pongReceived) {
        this.pongReceived = false;
        try {
          this.websocket.ping();
        } catch (e) {
          this.websocket.close();
        }
      } else {
        this.websocket.close();
      }
    }, this.pingTimeout);
    this.websocket.on('close', () => {
      clearInterval(pingInterval);
    });
    this.websocket.on('pong', () => {
      this.pongReceived = true;
    });
  }

  /**
   * Send the data generated by writeSyncStep1 to the client.
   *
   * This initializes the client and sends the current note content.
   * @param {Doc} doc - the yjs doc of this connection
   */
  public sendInitialSync(): void {
    const encoder = encoding.createEncoder();
    encoding.writeVarUint(encoder, MessageType.SYNC);
    writeSyncStep1(encoder, this.realtimeNote.getYDoc());
    this.websocket.send(encoding.toUint8Array(encoder));
  }

  public sendAwarenessState(): void {
    const encoder = encoding.createEncoder();
    const awareness = this.realtimeNote.getAwareness();
    const awarenessStates = awareness.getStates();
    encoding.writeVarUint(encoder, MessageType.AWARENESS);
    encoding.writeVarUint8Array(
      encoder,
      encodeAwarenessUpdate(awareness, Array.from(awarenessStates.keys())),
    );
    this.websocket.send(encoding.toUint8Array(encoder));
  }
}
